#pragma once

#include "stdafx.h"
#include "CircularBuffer.h"

class ClientSession;
class SessionManager;

// enum I/O type
enum class IOTYPE
{
	IO_NONE,
	IO_SEND,
	IO_RECV,
	IO_RECV_ZERO,
	IO_ACCEPT,
	IO_DISCONNECT
};

/*
소켓 버퍼 정보를 구조체로 만드는데 이때 WSABUF 와 overlapped 를 포함한다.
WSABUF 는WSASend 나WSARecv 함수의 인자로 전달되는 버퍼에 사용되는 구조체 이기에 포함 되고
overlapped 구조체 변수를 넣어주는건 현재 완료된 입출력 정보를 얻어 낼때 사용 된다.
*/
/*
이 구조체를 사용하는 곳에서 overlapped 초기화를 위해
memset 을 사용하여 해당 구조체를 초기화 시킬 경우,
해당 구조체 내의 멤버변수들 모두 값이 초기화 되기 때문에
OVERLAPPED 구조체를 상속받는 형태보다
자신이 사용할 구조체를 만들고 그 안에 OVERLAPPED 변수를 가지고 있는 형태가 
범용적인 측면에서 좋다고 생각된다.
*/
typedef struct sOverlappedSocket : public OVERLAPPED
{
	sOverlappedSocket()
	{
		// init
		memset(m_Buffer, 0, MAX_BUFSIZE);
		memset(&m_WSABuf, 0, sizeof(WSABUF));
	}
	IOTYPE					m_IOType;
	WSABUF					m_WSABuf;
	char					m_Buffer[MAX_BUFSIZE];
} SOVERLAPPED;

// client session class
// ----- METHOD -----
// OnConnect() : do connect
// IsConnected() : confirm client is connected
// Recv() : recv transfered data by client
// Send() : send to client by server
// Disconnect() : disconnect client
// ----- 기능설명 -----
// 해당 클래스는 클라이언트에 대해 직접적인 CONNECT, DISCONNECT 기능을 수행하는 것이 아니다.
// CONNECT, DISCONNECT 이 후 접속한 클라이언트에 해당하는 소켓정보를 관리하기 위한 클래스.
class ClientSession
{
private:
	bool			m_IsConnected;	// for get info what client is connected
	SOCKET			m_Socket;		// client socket

	SOCKADDR_IN		m_ClientAddr;	// client address

	SOVERLAPPED		m_RecvOverlapped;// overlapped for recv
	SOVERLAPPED		m_SendOverlapped;// overlapped for send

	// game information
	int				m_RoomNum;		// -1 : not in game
	int				m_PlayerIndex;	// -1 : not in game

	char			m_ID[MAX_ID_LEN];
	bool			m_IsLogin;
	
	// circular buffer
	CircularBuffer	m_RingBuffer;

public:
	ClientSession(SOCKET socket);
	~ClientSession() {}

	bool			OnConnect(SOCKADDR_IN* address);			// do connect client	
	bool			DisConnect();							// disconnect

	// const function
	// const 선언된 함수는 이 함수 내에서 멤버변수의 값을 수정하지 않는다는 의미를 가지며,
	// const 로 선언된 해당 객체에선 const 함수만 부를 수 있게되고,
	// 다른 멤버함수들은 멤버변수 값 수정의 가능성을 가지고 있기때문에 error 를 발생시킨다.
	bool			IsConnected() const;					// return client is connected
	bool			Recv();									// recv data by client
	bool			Send();									// send data to client

	// get ///////////////////////
	SOCKET			GetSocket()			{ return m_Socket; } // return socket
	int				GetRoomNum()		{ return m_RoomNum; }

	SOVERLAPPED		GetRecvOverlapped() { return m_RecvOverlapped; }
	SOVERLAPPED		GetSendOverlapped() { return m_SendOverlapped; }

	char*			GetSendOverlappedBuffer() { return m_SendOverlapped.m_Buffer; }

	// set ///////////////////////
	void			SetRoomNum(int roomNum)			{ m_RoomNum = roomNum; }
	void			SetPlayerIndex(int playerIndex)	{ m_PlayerIndex = playerIndex; }

	bool			SetSendOverlapped();
	bool			SetSendOverlapped(char* buffer, int bufferSize);

	// id
	void			SetID(char* id) { strcpy(m_ID, id); }
	char*			GetID() { return m_ID; }
	void			CleanID() { memset(m_ID, 0, MAX_ID_LEN); }

	// login
	void			SetIsLogin(bool isLogin) { m_IsLogin = isLogin; }
	bool			GetIsLogin() { return m_IsLogin; }

	// ring buffer
	void			CompleteRecv(DWORD dataSize);
	bool			PopBuffer(char* outBuffer);
};

